// Super abstract class Sequence
import java.util.Arrays;

abstract class Sequence {
  /**
   * The sequence author
   */
  abstract String author();
  
  /**
   * The sequence description
   */
  abstract String description();
  
  /**
   * Computes the nth sequence term
   */
  abstract int compute(int n);
  
  /**
   * Returns the first n seq terms as an array.
   */
  int [] toArray(int n) {
    int[] seq = new int[n];
    for (int i=0; i<n; i++)
      seq[i] = compute(i+1);
    return seq;
  }
  
  /**
   * Returns the first n seq terms as a string.
   * Sequence may then simply be printed as: println(sequence.toString(n))
   */
  String toString(int n) {
    return Arrays.toString(toArray(n));
  }
  
  // All display functions must scale the canvas properly
  
  /**
   * Display n seq terms as you wish
   */
  abstract void display(int n);
   
  /**
   * Display n seq terms as a bar chart: https://en.wikipedia.org/wiki/Bar_chart
   * Warning: Should be implemented here in the super class!
   */
  void barChart(int n) {
    fill(#000000);
    int j=n;
    translate(500,500);
    rotate(PI);
    for(int i=0;i<n;i++){
    quad(i*10,0, i*10, compute(j), (i+1)*10, compute(j),(i+1)*10, 0);
    //quad(i*10,0, i*10, j, (i+1)*10, j,(i+1)*10, 0);
    j--;
    }
  }
  
  void lineChart(int n) {
    translate(500,500);
    int j=n;
    rotate(PI);
    strokeWeight(5);
    for(int i=1;i<(n+1);i++){
    stroke(20*i,50,100);
    line((i-1)*20, compute(j), i*20, compute(j-1));
    j--;
    }
    
  }
  
  void curveFitting(int n) {
    
    translate(500,500);
    int j=n;
    rotate(PI);
    strokeWeight(5);
    for(int i=1;i<(n+1);i++){
      noFill();
      stroke(20*i,50,100);
      line((i-1)*20, compute(j), i*20, compute(j-1));
      fill(#666666);
      ellipse((i-1)*20,compute(j),5,5);
       j--;
    }
  }
}
